syntax = "proto3";

package grpckeystore;

service GRPCKeyStore {

    //
    // Keys can be established via one of two methods:
    // If the key pair is generated by the remote store, NewKey/AssociateKey is used
    // If the key is generated by notary, AddKey is used.
    //

    // MakeKey allows the remote key store to generate or provide a previously
    // generated private key.  This allows a key store to provide a key pair
    //  and never divulge private key information. MakeKey/AssociateKey is an
    // alternative to AddKey.
    rpc MakeKey (MakeKeyReq) returns (MakeKeyRsp) {
    }

    // AssociateKey follows a successful MakeKey.  It allows notary to inform the
    // remote key store that the key is in use with the provided
    // KeyId
    rpc AssociateKey (AssociateKeyReq) returns (AssociateKeyRsp) {
    }

    // AddKey allows the remote key store to save a key that was generated by
    // notary.  AddKey is an alternative to the MakeKey/AssociateKey sequence.
    // With AddKey, notary generates they key pair and sends it to the key store.
    // AddKey maps to KeyStore.AddKey()
    rpc AddKey (AddKeyReq) returns (AddKeyRsp) {
    }

    // Get a stored key from the remote key store
    // GetKey maps to KeyStore.GetKey()
    rpc GetKey (GetKeyReq) returns (GetKeyRsp) {
    }

    // Get specific key information from the remote keystore
    // GetKeyInfo maps to KeyStore.GetKeyInfo()
    rpc GetKeyInfo (GetKeyInfoReq) returns (GetKeyInfoRsp) {
    }

    // List keys available in the remote keystore
    // ListKeys maps to KeyStore.ListKeys()
    rpc ListKeys (ListKeysReq) returns (ListKeysRsp) {
    }

    // Remove a key from the keystore
    // RemoveKey maps to KeyStore.RemoveKey()
    rpc RemoveKey (RemoveKeyReq) returns (RemoveKeyRsp) {
    }

    // Sign a message with the specified key
    // Sign maps to PrivateKey.Sign()
    rpc Sign (SignReq) returns (SignRsp) {
    }
}

message MakeKeyReq {
    string Gun = 1;          // see notary/tuf/data/types.go -> GUN type
    string Role = 2;         // see notary/tuf/data/types.go -> TUFTypes
    string Algorithm = 3;    // see notary/tuf/data/types.go -> Key types
    string SignatureAlgorithm = 4; // see notary/tuf/data/types.go -> Signature types
}

message MakeKeyRsp {
    string RemoteKeyId = 1; // optional remote identifier provided by key store
    bytes PublicKey = 2;    // Public key provided by key store
    string DebugMsg = 3;    // Optional informational string returned from remote
}


message AssociateKeyReq {
    string KeyId = 1;
    string RemoteKeyId = 2;
    string Gun = 3;
    string Role = 4;
    string Algorithm = 5;
    string SignatureAlgorithm = 6;
    bytes PublicKey = 7;     // Public key that was returned in NewKey

}

message AssociateKeyRsp {
    string DebugMsg = 1;
}

message AddKeyReq {
    string KeyId = 1;
    string Gun = 2;
    string Role = 3;
    string Algorithm = 4;
    string SignatureAlgorithm = 5;
    bytes PublicKey = 6;
    bytes PrivateKey = 7;
}

message AddKeyRsp {
    string RemoteKeyId = 1;
    string DebugMsg = 2;
}

message GetKeyReq {
    string KeyId = 1;
    string RemoteKeyId = 2;
}

message GetKeyRsp {
    string Gun = 1;
    string Role = 2;
    string Algorithm = 3;
    string SignatureAlgorithm = 4;
    bytes PublicKey = 5;
    string DebugMsg = 6;
}

message GetKeyInfoReq {
    string KeyId = 1;
    string RemoteKeyId = 2;
}

message GetKeyInfoRsp {
    string Gun = 1;
    string Role = 2;
    string DebugMsg = 3;
}

message ListKeysReq {}

message ListKeysRsp {
    message KeyInfo {
        string KeyId = 1;
        string RemoteKeyId = 2;
        string Gun = 3;
        string Role = 4;

    }
    repeated KeyInfo KeyData = 1;
    string DebugMsg = 2;

}

message RemoveKeyReq {
    string KeyId = 1;
    string RemoteKeyId = 2;

}

message RemoveKeyRsp {
    string DebugMsg = 1;
}

message SignReq {
    string KeyId = 1;
    string RemoteKeyId = 2;
    bytes Message = 3;
}

message SignRsp {
    bytes Signature = 1;
    string DebugMsg = 2;
}
